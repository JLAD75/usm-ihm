import React, { useState } from 'react';
import { useAppStore } from '../../store/appStore';
import { format } from 'date-fns';
import { fr } from 'date-fns/locale';
import ReactMarkdown from 'react-markdown';

const MASKS = [
  {
    label: "Synth√®se projet (Chef de projet)",
    value: "pm",
    prefix: "Tu es un chef de projet exp√©riment√©. Analyse le planning ci-dessous, identifie les points critiques, propose des axes d‚Äôoptimisation, et r√©dige une synth√®se claire √† destination d‚Äôun comit√© de pilotage.\n\n",
    demande: `Pourriez-vous analyser ce calendrier de d√©veloppement et me fournir une synth√®se incluant :\n1. La dur√©e totale estim√©e du projet\n2. La r√©partition de l'effort par Epic\n3. Les p√©riodes critiques ou goulots d'√©tranglement potentiels\n4. Des recommandations pour optimiser le planning\n5. Une analyse des d√©pendances entre User Stories\n\nMerci de pr√©senter cette synth√®se de mani√®re claire et structur√©e.`
  },
  {
    label: "Conseiller en organisation agile",
    value: "agile",
    prefix: "Tu es un coach agile. Analyse la planification des User Stories, d√©tecte les d√©pendances probl√©matiques, propose des am√©liorations pour fluidifier le flux de travail et optimiser la v√©locit√© de l‚Äô√©quipe.\n\n",
    demande: `Merci d‚Äôidentifier les points de blocage, les d√©pendances risqu√©es, et de proposer des actions concr√®tes pour am√©liorer la livraison continue et la collaboration.`
  },
  {
    label: "R√©dacteur technique",
    value: "techwriter",
    prefix: "Tu es un r√©dacteur technique. √Ä partir du planning, r√©dige un rapport structur√©, synth√©tise les informations cl√©s, et pr√©pare un mail de suivi √† destination des parties prenantes.\n\n",
    demande: `Merci de fournir un rapport synth√©tique et un exemple de mail de suivi pour l‚Äô√©quipe projet.`
  },
  {
    label: "Gestion des risques (IT)",
    value: "risks",
    prefix: "Tu es un expert en gestion des risques IT. Identifie les risques majeurs du planning, propose des mesures de mitigation, et alerte sur les points de vigilance.\n\n",
    demande: `Merci de pr√©senter une analyse des risques, leur impact potentiel, et des recommandations pour les r√©duire.`
  },
  {
    label: "Synth√®se pour Product Owner",
    value: "po",
    prefix: "Tu es un Product Owner exp√©riment√©. Analyse le planning, identifie les incoh√©rences de priorisation, propose des arbitrages et r√©dige une synth√®se √† destination de l‚Äô√©quipe de d√©veloppement.\n\n",
    demande: `Merci de signaler les User Stories √† re-prioriser, les d√©pendances √† clarifier, et de proposer un plan d‚Äôaction pour maximiser la valeur m√©tier livr√©e.`
  },
  {
    label: "Expert UX/UI",
    value: "uxui",
    prefix: "Tu es un expert UX/UI. Analyse la r√©partition des User Stories, d√©tecte les incoh√©rences ou oublis potentiels c√¥t√© exp√©rience utilisateur, et propose des recommandations.\n\n",
    demande: `Merci de fournir une analyse des impacts UX, de sugg√©rer des am√©liorations et d‚Äôalerter sur les risques pour l‚Äôexp√©rience utilisateur.`
  },
  {
    label: "Synth√®se pour communication client",
    value: "client",
    prefix: "Tu es un consultant en communication projet. R√©dige une synth√®se vulgaris√©e du planning √† destination d‚Äôun client non technique, en mettant en avant les grandes √©tapes et les b√©n√©fices attendus.\n\n",
    demande: `Merci de r√©diger un texte clair, synth√©tique et rassurant, adapt√© √† un public non technique.`
  },
];

const LLMPromptGenerator: React.FC = () => {
  const { userStories, settings } = useAppStore();
  const [copied, setCopied] = useState(false);
  const [mask, setMask] = useState(MASKS[0].value);
  const [emojis, setEmojis] = useState(false); // Option emojis
  const selectedMask = MASKS.find(m => m.value === mask) ?? MASKS[0];
  
  // G√©n√©rer le prompt pour le LLM
  const generatePrompt = () => {
    if (userStories.length === 0) {
      return "Aucune User Story n'a √©t√© ajout√©e. Veuillez ajouter des User Stories pour g√©n√©rer un prompt.";
    }
    
    // Trier les user stories par ordre
    const sortedStories = [...userStories].sort((a, b) => a.order - b.order);
    
    // Formater la date
    const formatDate = (date: Date | null) => {
      if (!date) return 'Non d√©finie';
      return format(date, 'dd/MM/yyyy', { locale: fr });
    };
    
    // Emojis
    const e = {
      info: emojis ? '‚ÑπÔ∏è ' : '',
      epic: emojis ? 'üóÇÔ∏è ' : '',
      story: emojis ? 'üìå ' : '',
      priority: emojis ? '‚≠ê ' : '',
      estimation: emojis ? '‚è±Ô∏è ' : '',
      start: emojis ? 'üö¶ ' : '',
      end: emojis ? 'üèÅ ' : '',
      dependency: emojis ? 'üîó ' : '',
      justification: emojis ? 'üí° ' : '',
      criteria: emojis ? '‚úÖ ' : '',
      holidays: emojis ? 'üèñÔ∏è ' : '',
      workdays: emojis ? 'üìÖ ' : '',
      demande: emojis ? 'üìù ' : '',
    };
    // G√©n√©rer le texte du prompt
    let prompt = selectedMask.prefix;
    prompt += `# ${e.info}Calendrier de d√©veloppement des User Stories\n\n`;
    
    // Informations g√©n√©rales
    prompt += `## Informations g√©n√©rales\n\n`;
    prompt += `- ${e.start}Date de d√©marrage du projet: ${formatDate(settings.projectStartDate)}\n`;
    
    // Jours ouvr√©s
    prompt += `- ${e.workdays}Jours ouvr√©s: `;
    const workdays: string[] = [];
    if (settings.workdays.monday) workdays.push('Lundi');
    if (settings.workdays.tuesday) workdays.push('Mardi');
    if (settings.workdays.wednesday) workdays.push('Mercredi');
    if (settings.workdays.thursday) workdays.push('Jeudi');
    if (settings.workdays.friday) workdays.push('Vendredi');
    if (settings.workdays.saturday) workdays.push('Samedi');
    if (settings.workdays.sunday) workdays.push('Dimanche');
    prompt += workdays.join(', ') + '\n';
    
    // P√©riodes de cong√©s
    if (settings.holidays.length > 0) {
      prompt += `- ${e.holidays}P√©riodes de cong√©s:\n`;
      settings.holidays.forEach(holiday => {
        prompt += `  * ${holiday.title}: du ${formatDate(holiday.startDate)} au ${formatDate(holiday.endDate)}\n`;
      });
    } else {
      prompt += `- Aucune p√©riode de cong√©s d√©finie\n`;
    }
    
    prompt += `\n## Liste des User Stories\n\n`;
    
    // Regrouper par Epic
    const epicGroups: Record<string, typeof sortedStories> = {};
    
    sortedStories.forEach(story => {
      if (!epicGroups[story.epic]) {
        epicGroups[story.epic] = [];
      }
      epicGroups[story.epic].push(story);
    });
    // Ajouter chaque Epic et ses User Stories
    Object.entries(epicGroups).forEach(([epic, stories]) => {
      prompt += `### ${e.epic}Epic: ${epic}\n\n`;
      stories.forEach(story => {
        prompt += `#### ${e.story}${story.id}: ${story.title}\n\n`;
        prompt += `- ${e.priority}**Priorit√©**: ${story.priority}\n`;
        prompt += `- ${e.estimation}**Estimation**: ${story.estimation} jour${story.estimation && story.estimation > 1 ? 's' : ''}\n`;
        prompt += `- ${e.start}**D√©but estim√©**: ${formatDate(story.estimatedStartDate)}\n`;
        prompt += `- ${e.end}**Fin estim√©e**: ${formatDate(story.estimatedEndDate)}\n`;
        // D√©pendance unique (champ dependency)
        if (story.dependency) {
          const dependencyStory = userStories.find(s => s.id === story.dependency);
          prompt += `- ${e.dependency}**D√©pendance**: ${story.dependency}${dependencyStory ? ` (${dependencyStory.title})` : ''}\n`;
        }
        if (story.justification) {
          prompt += `- ${e.justification}**Justification**: ${story.justification}\n`;
        }
        if (Array.isArray(story.acceptanceCriteria) && story.acceptanceCriteria.length > 0) {
          prompt += `- ${e.criteria}**Crit√®res d'acceptation**:\n`;
          story.acceptanceCriteria.forEach(criteria => {
            prompt += `    * ${criteria.label}\n`;
          });
        }
        prompt += '\n';
      });
    });
    
    // Section demande adapt√©e au masque
    prompt += `## ${e.demande}Demande\n\n`;
    prompt += selectedMask.demande;
    return prompt;
  };
  
  const prompt = generatePrompt();
  
  // Copier le prompt dans le presse-papiers
  const copyToClipboard = () => {
    navigator.clipboard.writeText(prompt).then(() => {
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    });
  };
  
  // Exporter le prompt en PDF
  const exportToPdf = () => {
    // Cette fonction sera impl√©ment√©e avec jsPDF
    // Pour l'instant, on utilise un t√©l√©chargement de fichier texte
    const blob = new Blob([prompt], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `prompt-llm-${format(new Date(), 'yyyy-MM-dd')}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };
  
  return (
    <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg">
      <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-4 gap-3">
        <h3 className="text-lg font-medium text-gray-900 dark:text-white"></h3>
        <div className="flex items-center gap-2">
          <label htmlFor="mask-select" className="text-sm text-gray-700 dark:text-gray-300 mr-2">Assistant</label>
          <select
            id="mask-select"
            value={mask}
            onChange={e => setMask(e.target.value)}
            className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          >
            {MASKS.map(m => (
              <option key={m.value} value={m.value}>{m.label}</option>
            ))}
          </select>
        </div>
        <div className="flex items-center gap-4">
          <label className="flex items-center text-sm text-gray-700 dark:text-gray-300 cursor-pointer select-none">
            <input
              type="checkbox"
              checked={emojis}
              onChange={e => setEmojis(e.target.checked)}
              className="form-checkbox h-4 w-4 text-indigo-600 transition duration-150 ease-in-out mr-1"
            />
            <span>Emojis</span>
          </label>
          <div className="flex space-x-3">
            <button
              onClick={copyToClipboard}
              className={`inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md shadow-sm ${
                copied
                  ? 'text-white bg-green-600 hover:bg-green-700 dark:bg-green-500 dark:hover:bg-green-600'
                  : 'text-white bg-indigo-600 hover:bg-indigo-700 dark:bg-indigo-500 dark:hover:bg-indigo-600'
              } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}
            >
              {copied ? 'Copi√© !' : 'Copier'}
            </button>
            <button
              onClick={exportToPdf}
              className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:bg-indigo-500 dark:hover:bg-indigo-600"
            >
              Exporter
            </button>
          </div>
        </div>
      </div>
      <div className="bg-gray-50 dark:bg-gray-900 p-4 rounded-md overflow-x-auto prose prose-indigo dark:prose-invert max-w-none text-sm"
           style={{ maxHeight: '65vh', minHeight: '200px', overflowY: 'auto' }}>
        <ReactMarkdown
          components={{
            pre: ({node, ...props}) => <pre {...props} className="bg-gray-200 dark:bg-gray-800 rounded p-2 overflow-x-auto" />,
            code: ({node, ...props}) => <code {...props} className="bg-gray-200 dark:bg-gray-800 rounded px-1" />,
            ul: ({node, ...props}) => <ul {...props} className="pl-6 list-disc marker:text-indigo-500 dark:marker:text-indigo-300" />,
            ol: ({node, ...props}) => <ol {...props} className="pl-6 list-decimal marker:text-indigo-500 dark:marker:text-indigo-300" />,
            li: ({node, ...props}) => <li {...props} className="mb-1 pl-1" />,
          }}
        >
          {prompt}
        </ReactMarkdown>
      </div>
      <p className="mt-4 text-sm text-gray-500 dark:text-gray-400">
        Ce prompt est con√ßu pour √™tre utilis√© avec des mod√®les de langage comme ChatGPT, Claude ou Gemini. S√©lectionnez un assistant, copiez le prompt et collez-le dans votre interface LLM pr√©f√©r√©e pour obtenir une synth√®se adapt√©e.
      </p>
    </div>
  );
};

export default LLMPromptGenerator;
